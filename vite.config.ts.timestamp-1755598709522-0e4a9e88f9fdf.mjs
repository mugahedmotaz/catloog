// vite.config.ts
import { defineConfig, loadEnv } from "file:///C:/Users/AKAM/OneDrive/Desktop/Catloog/node_modules/vite/dist/node/index.js";
import dotenv from "dotenv";
import react from "file:///C:/Users/AKAM/OneDrive/Desktop/Catloog/node_modules/@vitejs/plugin-react/dist/index.mjs";

// api/connect-domain.ts
var ALLOWED_ORIGINS = /* @__PURE__ */ new Set([
  "http://localhost:5173",
  "http://127.0.0.1:5173",
  "http://localhost:4173",
  // vite preview
  "http://127.0.0.1:4173",
  "https://catloog.vercel.app",
  "https://www.catloog.vercel.app"
]);
function withCors(resp, origin) {
  const headers = new Headers(resp.headers);
  if (origin && ALLOWED_ORIGINS.has(origin)) {
    headers.set("Access-Control-Allow-Origin", origin);
    headers.set("Vary", "Origin");
  }
  headers.set("Access-Control-Allow-Methods", "POST, GET, OPTIONS");
  headers.set("Access-Control-Allow-Headers", "Content-Type, Authorization");
  headers.set("Access-Control-Max-Age", "86400");
  return new Response(resp.body, { status: resp.status, headers });
}
function corsJson(origin, obj, status = 200) {
  const resp = new Response(JSON.stringify(obj), {
    status,
    headers: { "Content-Type": "application/json" }
  });
  return withCors(resp, origin || void 0);
}
async function handler(req) {
  const url = new URL(req.url);
  const origin = req.headers.get("origin");
  if (req.method === "OPTIONS") {
    return withCors(new Response(null, { status: 204 }), origin || void 0);
  }
  if (req.method === "GET" && url.searchParams.get("debug") === "1") {
    const storesProjectId = process?.env?.VERCEL_STORES_PROJECT_ID;
    const projectId2 = process?.env?.VERCEL_PROJECT_ID;
    const token2 = process?.env?.VERCEL_TOKEN;
    const teamId2 = process?.env?.VERCEL_TEAM_ID;
    return corsJson(origin, {
      ok: true,
      env: {
        VERCEL_STORES_PROJECT_ID: Boolean(storesProjectId),
        VERCEL_PROJECT_ID: Boolean(projectId2),
        VERCEL_TOKEN: Boolean(token2),
        VERCEL_TEAM_ID: Boolean(teamId2)
      },
      runtime: "edge"
    });
  }
  if (req.method === "GET" && url.searchParams.get("status") === "1") {
    const domain2 = url.searchParams.get("domain");
    const projectId2 = process?.env?.VERCEL_STORES_PROJECT_ID || process?.env?.VERCEL_PROJECT_ID;
    const token2 = process?.env?.VERCEL_TOKEN;
    const teamId2 = process?.env?.VERCEL_TEAM_ID;
    if (!projectId2 || !token2) return corsJson(origin, { error: "Missing Vercel credentials on server" }, 500);
    if (!domain2) return corsJson(origin, { error: "Missing domain" }, 400);
    try {
      const statusUrl = new URL(`https://api.vercel.com/v6/domains/${encodeURIComponent(domain2)}`);
      if (teamId2) statusUrl.searchParams.set("teamId", teamId2);
      const statusResp = await fetch(statusUrl.toString(), {
        headers: { Authorization: `Bearer ${token2}` }
      });
      const text = await statusResp.text();
      const data = text ? JSON.parse(text) : null;
      if (!statusResp.ok) {
        return corsJson(origin, { error: data?.error?.message || data || "Failed to fetch domain status" }, statusResp.status);
      }
      return corsJson(origin, { ok: true, domain: domain2, ...data });
    } catch (e) {
      return corsJson(origin, { error: e?.message || "Unexpected error" }, 500);
    }
  }
  if (req.method !== "POST" && req.method !== "DELETE") {
    return corsJson(origin, { error: "Method Not Allowed" }, 405);
  }
  let body = null;
  try {
    body = await req.json();
  } catch (e) {
    return corsJson(origin, { error: "Invalid JSON body" }, 400);
  }
  const domain = body?.domain;
  if (!domain || typeof domain !== "string") {
    return corsJson(origin, { error: "Missing domain" }, 400);
  }
  const domainRegex = /^(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[A-Za-z]{2,}$/;
  const projectId = process?.env?.VERCEL_STORES_PROJECT_ID || process?.env?.VERCEL_PROJECT_ID;
  const token = process?.env?.VERCEL_TOKEN;
  const teamId = process?.env?.VERCEL_TEAM_ID;
  if (!projectId || !token) {
    return corsJson(origin, { error: "Missing Vercel credentials on server" }, 500);
  }
  if (req.method === "DELETE") {
    try {
      const delUrl = new URL(`https://api.vercel.com/v9/projects/${encodeURIComponent(projectId)}/domains/${encodeURIComponent(String(domain))}`);
      if (teamId) delUrl.searchParams.set("teamId", teamId);
      const delResp = await fetch(delUrl.toString(), {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` }
      });
      const text = await delResp.text();
      let data = null;
      try {
        data = text ? JSON.parse(text) : null;
      } catch {
      }
      if (!delResp.ok) {
        return corsJson(origin, { error: data?.error?.message || data || "Failed to remove domain" }, delResp.status);
      }
      return corsJson(origin, { success: true, removed: true, domain: String(domain) });
    } catch (e) {
      return corsJson(origin, { error: e?.message || "Unexpected error" }, 500);
    }
  }
  const normalized = String(domain).trim().toLowerCase().replace(/^https?:\/\//, "").replace(/\/$/, "");
  if (!domainRegex.test(normalized)) {
    return corsJson(origin, { error: "Invalid domain format" }, 400);
  }
  const isApex = normalized.split(".").length === 2;
  try {
    const addUrl = new URL(`https://api.vercel.com/v10/projects/${encodeURIComponent(projectId)}/domains`);
    if (teamId) addUrl.searchParams.set("teamId", teamId);
    const addResp = await fetch(addUrl.toString(), {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`
      },
      body: JSON.stringify({ name: normalized })
    });
    let addData = null;
    try {
      const text = await addResp.text();
      addData = text ? JSON.parse(text) : null;
    } catch {
    }
    if (!addResp.ok) {
      const code = addData?.error?.code || addData?.code;
      if (!(code && String(code).includes("domain_already"))) {
        if (code === "domain_conflict" || code === "domain_already_in_use") {
          return corsJson(origin, { error: "Domain is already in use by another project or team on Vercel. Remove it there first or transfer ownership." }, 409);
        }
        if (addResp.status === 401 || addResp.status === 403) {
          return corsJson(origin, { error: "Unauthorized: Check VERCEL_TOKEN and VERCEL_TEAM_ID (if using a Team)." }, addResp.status);
        }
        if (addResp.status === 404) {
          return corsJson(origin, { error: "Project not found: Verify VERCEL_PROJECT_ID belongs to this project/account/team." }, 404);
        }
        return corsJson(origin, { error: addData?.error?.message || addData || "Failed to add domain" }, addResp.status);
      }
    }
    try {
      const verifyUrl = new URL(`https://api.vercel.com/v6/domains/${encodeURIComponent(normalized)}/verify`);
      if (teamId) verifyUrl.searchParams.set("teamId", teamId);
      await fetch(verifyUrl.toString(), {
        method: "POST",
        headers: { Authorization: `Bearer ${token}` }
      });
    } catch {
    }
    const statusUrl = new URL(`https://api.vercel.com/v6/domains/${encodeURIComponent(normalized)}`);
    if (teamId) statusUrl.searchParams.set("teamId", teamId);
    const statusResp = await fetch(statusUrl.toString(), {
      headers: { Authorization: `Bearer ${token}` }
    });
    let statusData = null;
    try {
      const text = await statusResp.text();
      statusData = text ? JSON.parse(text) : null;
    } catch {
    }
    if (!statusResp.ok) {
      return corsJson(origin, { error: statusData?.error?.message || statusData || "Failed to fetch domain status" }, statusResp.status);
    }
    const verified = Boolean(statusData?.verified);
    const txtRecords = statusData?.verification || [];
    return corsJson(origin, {
      success: true,
      domain: normalized,
      verified,
      needsDNS: !verified,
      instructions: verified ? "Domain is verified and active." : isApex ? "Create an A record pointing to 76.76.21.21. For www, add CNAME to cname.vercel-dns.com, then retry." : "Create a CNAME pointing to cname.vercel-dns.com for this subdomain, then retry.",
      verification: txtRecords
    });
  } catch (e) {
    return corsJson(origin, { error: e?.message || "Unexpected error" }, 500);
  }
}

// vite.config.ts
dotenv.config();
var vite_config_default = defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd(), "");
  const apiTarget = env.VITE_DEV_API_PROXY || env.VITE_API_BASE;
  const localApiPlugin = {
    name: "local-api-connect-domain",
    configureServer(server) {
      server.middlewares.use("/api/connect-domain", async (req, res) => {
        try {
          const chunks = [];
          await new Promise((resolve) => {
            req.on("data", (c) => chunks.push(c));
            req.on("end", () => resolve());
          });
          const body = Buffer.concat(chunks);
          const origin = `http://localhost:${server.config.server.port || 5173}`;
          const url = origin + (req.url || "/api/connect-domain");
          const method = (req.method || "GET").toUpperCase();
          const request = new Request(url, {
            method,
            headers: req.headers,
            body: method === "GET" || method === "HEAD" ? void 0 : body
          });
          const response = await handler(request);
          res.statusCode = response.status;
          response.headers.forEach((v, k) => res.setHeader(k, v));
          const ab = await response.arrayBuffer();
          res.end(Buffer.from(ab));
        } catch (e) {
          res.statusCode = 500;
          res.setHeader("Content-Type", "application/json");
          res.end(JSON.stringify({ error: e?.message || "Internal error" }));
        }
      });
    }
  };
  return {
    // Always include localApiPlugin so it handles /api/connect-domain in dev,
    // even if a proxy (VITE_DEV_API_PROXY/VITE_API_BASE) is configured.
    plugins: [react(), localApiPlugin].filter(Boolean),
    optimizeDeps: {
      exclude: ["lucide-react"]
    },
    server: {
      // Forward /api/* during local dev to deployed serverless functions
      proxy: apiTarget ? {
        "/api": {
          target: apiTarget,
          changeOrigin: true,
          secure: true
        }
      } : void 0
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
